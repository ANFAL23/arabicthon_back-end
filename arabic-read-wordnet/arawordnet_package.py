# -*- coding: utf-8 -*-
"""arawordnet-package

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eDRlWhq9FF2QJ3dEWgaT6MEm1inzLfyZ
"""

# Commented out IPython magic to ensure Python compatibility.
from bs4 import BeautifulSoup
from collections import Counter, defaultdict

wordnet_path = '/content/arb2-lmf.xml'
# %store wordnet_path
# %store -r wordnet_path

print("Loading AraWordNet")
wordnet_file = open(wordnet_path).read()
wordnet = BeautifulSoup(wordnet_file, "xml")

from bs4 import BeautifulSoup
from collections import Counter, defaultdict

class awn :
    def __init__(self, wordnet_path):
            # Initialize the WordNetAnalyzer with the path to the WordNet XML file
            self.wordnet = self.load_wordnet(wordnet_path)
            self.hypernym = self.get_hypernym()
            self.synset_ids = self.get_synset_ids(self.hypernym)
            self.lexical_entries = self.extract_vocabulary(self.synset_ids)
            self.synset_dict = self.get_synset_dict(self.synset_ids)
            self.hyponym = self.get_hyponym()
            self.has_instance_relations = self.get_has_instance()
            self.is_instance_relations = self.get_is_instance()



    def load_wordnet(self, wordnet_path):
        # Load WordNet from the XML file using BeautifulSoup
        with open(wordnet_path, 'r', encoding='utf-8') as file:
            content = file.read()
            wordnet = BeautifulSoup(content, 'xml')
        return wordnet

    def get_synset_ids(self, hypernym):

        # List for synonym set ids
        synset_ids = []
        for relation in hypernym:
            # Extract parent synonym set id
            synset_ids.append(relation[0])
            # Extract child synonym set id
            synset_ids.append(relation[1])

        # Create unique set of synonym set ids extracted from the valid hypernym relations
        synset_ids = list(set(synset_ids))
        print("Number of synonym set ids: {}".format(len(synset_ids)))

        return synset_ids



    def get_hypernym(self):

        print("Reading hypernym relations")
        hypernym_relations = []
        # For every synonym set
        for synset in wordnet.findAll('Synset'):
            # Get its hypernym relations
            synset_hypernym_relations = list(filter((lambda relation: relation['relType'] == 'hypernym'), synset.findAll('SynsetRelation')))
            for relation in synset_hypernym_relations:
                # Construct a pair between each synonym set and its child
                hypernym_relations.append((synset['id'], relation['targets']))

        return hypernym_relations



    def get_hyponym(self):

        print("Reading hyponym relations")
        hyponym_relations = []
        # For every synonym set
        for synset in wordnet.findAll('Synset'):
            # Get its hyponym relations
            synset_hyponym_relations = list(filter((lambda relation: relation['relType'] == 'hyponym'), synset.findAll('SynsetRelation')))
            for relation in synset_hyponym_relations:
                # Construct a pair between each synonym set and its parent
                hyponym_relations.append((relation['targets'], synset['id']))

        return hyponym_relations


    def get_has_instance(self):

        print("Reading has-instance relations")
        has_instance_relations = []
        # For every synonym set
        for synset in wordnet.findAll('Synset'):
            # Get its has_instance relations
            synset_has_instance_relations = list(filter((lambda relation: relation['relType'] == 'has_instance'), synset.findAll('SynsetRelation')))
            for relation in synset_has_instance_relations:
                # Construct a pair between each synonym set and its instance
                has_instance_relations.append((synset['id'], relation['targets']))

        return has_instance_relations


    def get_is_instance(self):

        print("Reading is-instance relations")
        is_instance_relations = []
        # For every synonym set
        for synset in wordnet.findAll('Synset'):
            # Get its is_instance relations
            synset_is_instance_relations = list(filter((lambda relation: relation['relType'] == 'is_instance'), synset.findAll('SynsetRelation')))
            for relation in synset_is_instance_relations:
                # Construct a pair between each synonym set and its object
                is_instance_relations.append((relation['targets'], synset['id']))

        return is_instance_relations



    def extract_vocabulary(self, synset_ids):
        # Filter lexical entries which have synonym set id appearing in our list
        lexical_entries = list(filter((lambda entry: entry.Sense['synset'] in synset_ids), wordnet.findAll('LexicalEntry')))
        # Extract words that correspond to our synonym set id list. These words form our vocabulary list.
        words = list(set(map((lambda entry: entry.Lemma['writtenForm']), lexical_entries)))
        print("Number of unique words: {}".format(len(words)))


        return lexical_entries, words

    def get_synset_dict(self, synset_ids):
        lexical_entries = list(filter((lambda entry: entry.Sense['synset'] in synset_ids), wordnet.findAll('LexicalEntry')))
        synset_dict = defaultdict(list)
        for entry in lexical_entries:
            written_form = entry.Lemma['writtenForm']
            synset_dict[entry.Sense['synset']].append(written_form)

        return synset_dict

"""  def get_invalid_children(self, relations):
        relations = list(set(relations))
        children = list(map((lambda relation: relation[1]), relations))
        counter = Counter(children)
        invalid_children = list(filter((lambda child: counter[child] > 1), children))

        print("Number of invalid children: {}".format(len(invalid_children)))
        return invalid_children

    def get_valid_hypernym_relations(self, relations, invalid_children):
        relations = list(filter((lambda relation: relation[0] not in invalid_children), relations))
        relations = list(filter((lambda relation: relation[1] not in invalid_children), relations))
        print("Number of valid hypernym relations without repeated children: {}".format(len(relations)))
        return relations """



""" def get_bi_directional(self, word, relation_type, relations):

        # List for the relations in both directions
        bi_directional_relations = []
        # Synset is the sense id for the parent, target is the sense id for the child
        for synset, target in relations:
            # Add a relation between the parent and the child
            bi_directional_relations.append((synset, target))
            # Add a relation in the other way around
            bi_directional_relations.append((target, synset))

        return bi_directional_relations"""

# Example of using the WordNetAnalyzer class
wordnet_path = '/content/arb2-lmf.xml'

wordnet_analyzer = awn(wordnet_path)

hypernym_relations = wordnet_analyzer.get_hypernym()

#extract words appearing in the valid hypernym relations
synset_ids = wordnet_analyzer.get_synset_ids(hypernym_relations)
lexical_entries, words = wordnet_analyzer.extract_vocabulary(synset_ids)


#Construct a dictionary for every synonym set id and its set of words. The key is the synonym set id and the value is a list of words
synset_dict = wordnet_analyzer.get_synset_dict(synset_ids)

# List of available relations
lista = ["hypernym", "hyponym", "is_instance", "has_instance"]

# Ask the user to choose a relation
print("Choose a relation type :")
for i, relation_name in enumerate(lista, start=1):
    print(f"{i}. {relation_name}")


selected_index = int(input("Enter the number corresponding to the relation: ")) - 1

# Get the selected relation
relation_type = lista[selected_index]

input_word = 'قبْر'

related_words = []

# Find the synset ID for the input word (assuming word is a class variable)
synset_id = None
for synset, words in synset_dict.items():
    if input_word in words:
        synset_id = synset
        break

if synset_id is not None:
    # Find related synsets based on the chosen relation type
    if relation_type == 'hypernym':
        related_synsets = [target for source, target in hypernym_relations if source == synset_id]
    elif relation_type == 'hyponym':
        related_synsets = [source for source, target in hypernym_relations if target == synset_id]
    elif relation_type == 'has_instance':
        related_synsets = [target for source, target in hypernym_relations if source == synset_id]
    elif relation_type == 'is_instance':
        related_synsets = [source for source, target in hypernym_relations if target == synset_id]
    else:
        print("Invalid relation type. Choose from hypernym, hyponym, has_instance, or is_instance.")

    # Get words corresponding to the related synsets
    related_words = [word for synset, words in synset_dict.items() if synset in related_synsets for word in words]

print(f"Words related to '{input_word}' based on {relation_type}:")
print(related_words)